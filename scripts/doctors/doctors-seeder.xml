<channel version="4.5.0">
  <id>c246c5c8-740c-488d-b300-ef9b8a8d57e4</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>doctors-seeder</name>
  <description></description>
  <revision>28</revision>
  <sourceConnector version="4.5.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.jdbc.DatabaseReceiverProperties" version="4.5.0">
      <pluginProperties/>
      <pollConnectorProperties version="4.5.0">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>1800000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="4.5.0">
        <responseVariable>d1</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>2</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <driver>oracle.jdbc.driver.OracleDriver</driver>
      <url>jdbc\:oracle\:thin\:@129.213.150.201\:1521\:SHDB</url>
      <username>SGHVBDS</username>
      <password>SGHVBDS21#</password>
      <select>// Get the database connection from the global map.
var dbConn = globalChannelMap.get(&quot;dbConn&quot;);

var sql = &quot;SELECT VM.cod_registro_med, VM.registro_med, VM.identificacion, VM.tipo_identificacion, VM.fecha_de_nacimiento, VM.primer_nombre, VM.primer_apellido, VM.forma_pago, VM.observaciones, VM.segundo_nombre, VM.segundo_apellido, VM.direccion, VM.cuenta_bancaria, VM.tipo_cuenta, VM.telefono, VM.celular, VM.e_mail, LISTAGG(EM.cod_especialidad, &apos;,&apos;) WITHIN GROUP (ORDER BY EM.cod_especialidad) AS especialidades FROM VW_ADM_MEDICO VM LEFT JOIN VW_ADM_MEDICO_ESPECIALIDAD EM ON VM.registro_med = EM.registro_med GROUP BY VM.cod_registro_med, VM.registro_med, VM.identificacion, VM.tipo_identificacion, VM.primer_nombre, VM.primer_apellido, VM.forma_pago, VM.fecha_de_nacimiento, VM.observaciones, VM.segundo_nombre, VM.segundo_apellido, VM.direccion, VM.cuenta_bancaria, VM.tipo_cuenta, VM.telefono, VM.celular, VM.e_mail&quot;;


if (dbConn == null || dbConn.getConnection().isClosed()) {
	// Create the connection.
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(globalChannelMap.get(&quot;dbDriver&quot;),globalChannelMap.get(&quot;dbUrl&quot;),globalChannelMap.get(&quot;dbUser&quot;),globalChannelMap.get(&quot;dbPassword&quot;));
	//src Put the new connection into the global map.
	globalChannelMap.put(&quot;dbConn&quot;, dbConn);
}
try {
	// Execute the query.
	var result = dbConn.executeCachedQuery(sql);
	logger.info(result);
} catch (e) {
	// Log the error.
	logger.error(&quot;Exception in Database Reader: &quot; + e);

	// Remove the global map connection variable so that it will be recreated on the next iteration.
	globalChannelMap.remove(&quot;dbConn&quot;);
}
dbConn.close();
// Return the result set.
return result;</select>
      <update>// This update script will be executed once after all results have been processed.
var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;oracle.jdbc.driver.OracleDriver&apos;,&apos;jdbc\:oracle\:thin\:@129.213.150.201\:1521\:SHDB&apos;,&apos;SGHVBDS&apos;,&apos;SGHVBDS21#&apos;);

} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</update>
      <useScript>true</useScript>
      <aggregateResults>true</aggregateResults>
      <cacheResults>true</cacheResults>
      <keepConnectionOpen>true</keepConnectionOpen>
      <updateMode>1</updateMode>
      <retryCount>3</retryCount>
      <retryInterval>10000</retryInterval>
      <fetchSize>1000</fetchSize>
      <encoding>DEFAULT_ENCODING</encoding>
    </properties>
    <transformer version="4.5.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.0">
          <name>makemessage</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>channelMap.put(&quot;FINAL_ARRAY&quot;, &quot;&quot;);
logger.info(msg);

var finalArray=[];
var len=msg.children().length();
var i=1;

for each(item in msg.children())
{
    var itemParsed = XmlUtil.toJson(item);
    var name = JSON.parse(itemParsed)[&apos;result&apos;][&apos;primer_nombre&apos;];
    var middleName = JSON.parse(itemParsed)[&apos;result&apos;][&apos;segundo_nombre&apos;];
    var lastName = JSON.parse(itemParsed)[&apos;result&apos;][&apos;primer_apellido&apos;];
    var secondLastName = JSON.parse(itemParsed)[&apos;result&apos;][&apos;segundo_apellido&apos;];

    var doctorName = name;
    if(middleName){
    		doctorName = doctorName + &quot; &quot; + middleName;
    	};

    	if(lastName) {
    		doctorName = doctorName + &quot; &quot; + lastName;
    	}

    	if(secondLastName) {&#xd;    		doctorName = doctorName + &quot; &quot; + secondLastName;&#xd;    	}
    
    finalArray.push({&#xd;    		&quot;medic_register&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;registro_med&apos;],
    		&quot;dni&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;identificacion&apos;],
    		&quot;dni_type&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;tipo_identificacion&apos;],
    		&quot;name&quot;: doctorName,
    		&quot;specialties_codes&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;especialidades&apos;],
    		&quot;email&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;e_mail&apos;],
    		&quot;phone_primary&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;telefono&apos;],
    		&quot;phone&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;celular&apos;],
    		&quot;birthday&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;fecha_de_nacimiento&apos;],
    		&quot;payment_method&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;forma_pago&apos;],
    		&quot;bank_account_number&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;cuenta_bancaria&apos;],
    		&quot;bank_account_type&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;tipo_cuenta&apos;],
    		&quot;observations&quot;: JSON.parse(itemParsed)[&apos;result&apos;][&apos;observaciones&apos;],&#xd;    	});
    i++;
};

channelMap.put(&quot;FINAL_ARRAY&quot;, JSON.stringify(finalArray));</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8cmVzdWx0Pg0KICAgIDxjb2RfcmVnaXN0cm9fbWVkPnZhbHVlPC9jb2RfcmVnaXN0cm9fbWVkPg0KICAgIDxyZWdpc3Ryb19tZWQ+dmFsdWU8L3JlZ2lzdHJvX21lZD4NCiAgICA8aWRlbnRpZmljYWNpb24+dmFsdWU8L2lkZW50aWZpY2FjaW9uPg0KICAgIDx0aXBvX2lkZW50aWZpY2FjaW9uPnZhbHVlPC90aXBvX2lkZW50aWZpY2FjaW9uPg0KICAgIDxmZWNoYV9kZV9uYWNpbWllbnRvPnZhbHVlPC9mZWNoYV9kZV9uYWNpbWllbnRvPg0KICAgIDxwcmltZXJfbm9tYnJlPnZhbHVlPC9wcmltZXJfbm9tYnJlPg0KICAgIDxwcmltZXJfYXBlbGxpZG8+dmFsdWU8L3ByaW1lcl9hcGVsbGlkbz4NCiAgICA8Zm9ybWFfcGFnbz52YWx1ZTwvZm9ybWFfcGFnbz4NCiAgICA8b2JzZXJ2YWNpb25lcz52YWx1ZTwvb2JzZXJ2YWNpb25lcz4NCiAgICA8c2VndW5kb19ub21icmU+dmFsdWU8L3NlZ3VuZG9fbm9tYnJlPg0KICAgIDxzZWd1bmRvX2FwZWxsaWRvPnZhbHVlPC9zZWd1bmRvX2FwZWxsaWRvPg0KICAgIDxkaXJlY2Npb24+dmFsdWU8L2RpcmVjY2lvbj4NCiAgICA8Y3VlbnRhX2JhbmNhcmlhPnZhbHVlPC9jdWVudGFfYmFuY2FyaWE+DQogICAgPHRpcG9fY3VlbnRhPnZhbHVlPC90aXBvX2N1ZW50YT4NCiAgICA8dGVsZWZvbm8+dmFsdWU8L3RlbGVmb25vPg0KICAgIDxjZWx1bGFyPnZhbHVlPC9jZWx1bGFyPg0KICAgIDxlX21haWw+dmFsdWU8L2VfbWFpbD4NCiAgICA8ZXNwZWNpYWxpZGFkZXM+dmFsdWU8L2VzcGVjaWFsaWRhZGVzPg0KPC9yZXN1bHQ+DQo=</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.5.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.5.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.5.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.5.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.5.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.5.0">
      <elements/>
    </filter>
    <transportName>Database Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.5.0">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>https://sigmaapi.phoenixtechsa.com/api/integration/doctors/seeder</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>{&quot;doctores&quot;: ${FINAL_ARRAY}}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>DEFAULT_ENCODING</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="4.5.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.0">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// Log the deployment
logger.info(&quot;Deploying channel: &quot; + channelId);

// Get the database connection from the global map (if there is one at this point).
var dbConn = globalChannelMap.get(&quot;dbConn&quot;);
var dbUrl=&quot;jdbc\:oracle\:thin\:@129.213.150.201\:1521\:SHDB&quot;; //PRODUCCION
var dbUser=&quot;SGHVBDS&quot;;
var dbPassword=&quot;SGHVBDS21#&quot;;
var dbDriver=&quot;oracle.jdbc.driver.OracleDriver&quot;;

globalChannelMap.put(&quot;dbUrl&quot;, dbUrl);
globalChannelMap.put(&quot;dbUser&quot;, dbUser);
globalChannelMap.put(&quot;dbPassword&quot;, dbPassword);
globalChannelMap.put(&quot;dbDriver&quot;, dbDriver);
// If there is not currently a database connection...
if (dbConn == null || dbConn.getConnection().isClosed()) {
	// Create the connection.
logger.info(&quot;creating connection: &quot;+dbUser);

	dbConn = DatabaseConnectionFactory.createDatabaseConnection(globalChannelMap.get(&quot;dbDriver&quot;),globalChannelMap.get(&quot;dbUrl&quot;),globalChannelMap.get(&quot;dbUser&quot;),globalChannelMap.get(&quot;dbPassword&quot;));

logger.info(&quot;set globla connection: &quot;);
	//script Put the new connection into the global map.
	globalChannelMap.put(&quot;dbConn&quot;, dbConn);
}

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.5.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.5.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1731521755869</time>
        <timezone>GMT-04:00</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>